@model IEnumerable<QuanLyThuVienCNPMNC.Models.MyTodo_List>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.min.css' rel='stylesheet' />
<script src='https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.10.2/fullcalendar.min.js'></script>

<style>
  @*  .todo-form {
        display: flex;
        justify-content: space-between;
    }

    button.btn.btn-success.todo-button {
        margin: 5px 0;
    }

    .todo-input {
        outline: none;
        border: 1px solid #dbdbdb;
        border-radius: 12px;
        padding-left: 12px;
        margin-top: 4px;
        height: 40px;
        margin-right: 8px;
        width: 100%;
    }

    .todo-list > li {
        list-style-type: none;
        display: flex;
        justify-content: space-between;

    }

        .todo-list > li > button {
            background-color: red;
            border: none;
            color: #fff;
            border-radius: 8px;
            font-size: 16px;
            padding: 4px;
            width: 70px;
        }*@



    /* Remove margins and padding from the list */
    #myUL_todo {
        margin: 0;
        padding: 0;
    }

    /* Style the list items */
    .li_todo {
        cursor: pointer;
        position: relative;
        padding: 12px 8px 12px 40px;
        list-style-type: none;
        background: #eee;
        font-size: 18px;
        transition: 0.2s;
        /* make the list items unselectable */
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

        /* Set all odd list items to a different color (zebra-stripes) */
        .li_todo:nth-child(odd) {
            background: #f9f9f9;
        }

        /* Darker background-color on hover */
        .li_todo:hover {
            background: #ddd;
        }

        /* When clicked on, add a background color and strike out text */
        .li_todo.checked {
            background: #888;
            color: #fff;
            text-decoration: line-through;
        }

            /* Add a "checked" mark when clicked on */
            .li_todo.checked::before {
                content: '';
                position: absolute;
                border-color: #fff;
                border-style: solid;
                border-width: 0 2px 2px 0;
                top: 10px;
                left: 16px;
                transform: rotate(45deg);
                height: 15px;
                width: 7px;
            }


    /* Style the close button */
    .close_todo {
        position: absolute;
        right: 0;
        top: 0;
        padding: 12px 16px 12px 16px;
    }

        .close_todo:hover {
            background-color: #f44336;
            color: white;
        }

    /* Style the header */
    .header_todo {
        background-color: #0798ba;
        padding: 30px 40px;
        color: white;
        text-align: center;
        border-radius: 20px;
    }

        /* Clear floats after the header */
        .header_todo:after {
            content: "";
            display: table;
            clear: both;
        }

    #myDIV:hover {
        border: 0.1rem groove #0a89a7;
    }
    /* Style the input */
    #input_todo {
        margin: 0;
        border: none;
        border-radius: 0;
        width: 76%;
        padding: 10px;
        float: left;
        font-size: 16px;
        transition: 0.3s;
    }

    #input_todo:hover {
        border-radius: 10px;
    }
    /* Style the "Add" button */
    .addBtn_todo {
        position: absolute;
        padding: 10px;
        width: 15%;
        background: #d9d9d9;
        color: #555;
        float: right;
        text-align: center;
        font-size: 16px;
        cursor: pointer;
        transition: 0.3s;
        border-radius: 0;
        margin-left: -10%;
    }

        .addBtn_todo:hover {
            background-color: #bbb;
            border-radius: 10px;
        }

</style>


<h2>Thông số</h2>
<hr />
<div class="row">
    <div class="col-lg-3 col-6">
        <!-- small box -->
        <div class="small-box bg-info">
            <div class="inner">
                <h3>@ViewBag.TotalBookCount</h3>

                <p>Tổng số lượng sách</p>
            </div>
            <div class="icon">
                <i class="fa-solid fa-book"></i>
            </div>
            <a href="@Url.Action("Index","DauSach")" class="small-box-footer">Xem thêm <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-6">
        <!-- small box -->
        <div class="small-box bg-success">
            <div class="inner">
                <h3>@ViewBag.TotalMemberCount</h3>

                <p>Tổng số độc giả</p>
            </div>
            <div class="icon">
                <i class="ion ion-person-add"></i>
            </div>
            <a href="@Url.Action("Index","DocGia")" class="small-box-footer">Xem thêm <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-6">
        <!-- small box -->
        <div class="small-box bg-warning">
            <div class="inner">
                <h3>@ViewBag.TotalPhieuMuon</h3>

                <p>Tổng số phiếu mượn</p>
            </div>
            <div class="icon">
                <i class="fa-solid fa-file"></i>
            </div>
            <a href="@Url.Action("Index","PhieuMuon")" class="small-box-footer">Xem thêm <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <!-- ./col -->
    <div class="col-lg-3 col-6">
        <!-- small box -->
        <div class="small-box bg-danger">
            <div class="inner">
                <h3>@ViewBag.TotalBaoCao</h3>

                <p>Tổng số báo cáo</p>
            </div>
            <div class="icon">
                <i class="fa-solid fa-pen"></i>
            </div>
            <a href="@Url.Action("Index","BaoCao")" class="small-box-footer">Xem thêm <i class="fas fa-arrow-circle-right"></i></a>
        </div>
    </div>
    <!-- ./col -->
</div>
<!-- /.row -->

<div class="row">
    <div class="col-6 text-justify">
        <h3 class="text-uppercase">Biểu đồ tổng hợp thông tin</h3>
        <canvas width="400" height="400" id="myChart"></canvas>
    </div>


    <!--<div class="col-6 text-justify" id="todolist">-->
    @*<h5>Mục tiêu hôm nay !!!</h5>
        <form class="todo-form">
            <input class="todo-input" type="text" id="new-todo" placeholder="Thêm công việc....">
            <button type="button" class="btn btn-success todo-button" onclick="addTodo()">Thêm</button>
        </form>
        <ul class="todo-list" id="todo-list"></ul>*@
    <!--</div>-->
    <div class="col-6 text-justify">

        <div id="myDIV" class="header_todo">
            <h2 style="margin:5px">My To Do List</h2>

            @using (Html.BeginForm("CreateTodo", "TrangChu", FormMethod.Post, new { id = "todoForm", onsubmit = "newElement(); return false;" }))
            {
                <input type="text" id="input_todo" name="mota" placeholder="Nhập công việc...">

                <button type="submit" class="addBtn_todo">Add</button>
            }
        </div>
        <ul id="myUL_todo">
            @foreach (var item in Model)
            {
               <li class="li_todo">
                   @Html.DisplayFor(model => item.MoTa)
                   <span onclick="deleteTodo(this)" class="close_todo" data-ngaytao="@item.NgayTao.ToString("hh:mm:ss")" data-manv="@item.MaNV">
                       @Html.DisplayFor(model => item.NgayTao)
                       
                   </span>
               </li>
            }
        </ul>
    </div>


</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
@*    // Create a "close" button and append it to each list item
    var myNodelist = document.getElementsByClassName("li_todo");
    var i;
    for (i = 0; i < myNodelist.length; i++) {
        var span = document.createElement("SPAN");
        var txt = document.createTextNode("\u00D7");
        span.className = "close_todo";
        span.appendChild(txt);
        myNodelist[i].appendChild(span);
    }*@


    // Click on a close button to delete the current list item
        function deleteTodo(element) {
            var ngaytao = element.getAttribute("data-ngaytao");
            var manv = element.getAttribute("data-manv");

            // Gửi yêu cầu POST đến controller bằng Ajax
            $.ajax({
                url: '@Url.Action("DeleteTodo", "TrangChu")',
                type: "POST",
                data: { ngaytao: ngaytao, manv: manv },
                success: function (result) {
                    // Xử lý kết quả nếu cần
                }
            });
            debugger;
        }

    // Add a "checked" symbol when clicking on a list item
    var list = document.getElementById('myUL_todo');
    list.addEventListener('click', function (ev) {
        if (ev.target.classList.contains('li_todo')) {
            ev.target.classList.toggle('checked');
            saveTodoItemStatus(ev.target);

        }
    }, false);
    //Lưu trạng thái
    function saveTodoItemStatus() {
        // Lấy danh sách các phần tử todo
        var todoItems = document.querySelectorAll('.li_todo');

        // Mảng để lưu trạng thái "checked"
        var checkedItems = [];

        // Lặp qua từng phần tử và kiểm tra trạng thái "checked"
        for (var i = 0; i < todoItems.length; i++) {
            var item = todoItems[i];
            var isChecked = item.classList.contains('checked');

            // Lưu trạng thái "checked" vào mảng
            checkedItems.push(isChecked);
        }

        // Lưu mảng trạng thái "checked" vào localStorage
        localStorage.setItem('todoItemsStatus', JSON.stringify(checkedItems));
    }
    // Khôi phục trạng thái "checked" từ localStorage
    window.addEventListener('load', function () {
        var checkedItems = JSON.parse(localStorage.getItem('todoItemsStatus')) || [];

        var todoItems = document.querySelectorAll('.li_todo');
        for (var i = 0; i < todoItems.length; i++) {
            var item = todoItems[i];
            var isChecked = checkedItems[i];

            // Áp dụng trạng thái "checked" cho phần tử todo
            if (isChecked) {
                item.classList.add('checked');
            }
        }
    });
    // Create a new list item when clicking on the "Add" button
    $(document).ready(function () {

    function newElement() {
    var inputValue = document.getElementById("input_todo").value;
    if (inputValue === '') {
        alert("You must write something!");
        return;
    }

    $.ajax({
        url: '@Url.Action("CreateTodo", "TrangChu")',
        type: 'POST',
        data: { mota: inputValue },
        success: function (response) {
            // Xử lý phản hồi từ controller (nếu cần)
            document.getElementById("myUL_todo").appendChild(createTodoItem(inputValue, false));
            document.getElementById("input_todo").value = "";
        },
        error: function () {
            // Xử lý lỗi (nếu cần)
        }
    });
}
});
function createTodoItem(text, isChecked) {
    var li = document.createElement("li");
    li.classList.add("li_todo");
    var t = document.createTextNode(text);
    li.appendChild(t);

    // Kiểm tra và thêm lớp "checked" nếu cần
    if (isChecked) {
        li.classList.add("checked");
    }

    var span = document.createElement("SPAN");
    var txt = document.createTextNode("\u00D7");
    span.className = "close_todo";
    span.appendChild(txt);
    li.appendChild(span);

    span.onclick = function () {
        var div = this.parentElement;
        div.style.display = "none";
    };

    return li;
}

</script>


<script>
    var ctx = document.getElementById('myChart').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['Tổng số lượng sách', 'Tổng số lượng độc giả', 'Tổng số phiếu mượn', 'Tổng số báo cáo'],
            datasets: [{
                label: 'Tỉ lệ',
                data: [@ViewBag.TotalBookCountPercent, @ViewBag.TotalMemberCountPercent, @ViewBag.TotalPhieuMuonPercent, @ViewBag.TotalBaoCaoPercent],
                backgroundColor: [
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(255, 99, 132, 0.2)',
                ],
                borderColor: [
                    'rgba(54, 162, 235, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(255, 99, 132, 1)',
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: false,
            cutoutPercentage: 50,
            legend: {
                position: 'right',
                labels: {
                    fontColor: 'black',
                    fontSize: 30
                }
            },
            animation: {
                animateScale: true,
                animateRotate: true
            }
        },
        tooltips: {
            callbacks: {
                label: function (tooltipItem, data) {
                    return data.labels[tooltipItem.index] + ': ' + data.datasets[0].data[tooltipItem.index] + '%';
                }
            }
        }
    });

</script>

@if (ViewBag.Message != null)
{
    <script type="text/javascript">
               document.addEventListener('DOMContentLoaded', function () {
                    Swal.fire({
                    title: 'Thành công',
                    text: '@ViewBag.Message',
                    icon: 'success',
                    confirmButtonText: 'OK'
                    });
                    });
    </script>
}
@if (TempData["MessageDelete"] != null)
{
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            Swal.fire({
                title: 'Success!!',
                text: 'Xóa thành công!!',
                icon: 'success',
                confirmButtonText: 'OK'
            });
        });
    </script>
}
@if (TempData["MessageErRole"] != null)
{
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            Swal.fire({
                title: 'Oops..',
                text: 'Bạn không có quyền truy cập vào   này!!',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
    </script>
}
@if (TempData["MessageEdit"] != null)
{
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            Swal.fire({
                title: 'Success!!',
                text: 'Chỉnh sửa thành côngg!!',
                icon: 'success',
                confirmButtonText: 'OK'
            });
        });
    </script>
}
@if (TempData["MessageAdd"] != null)
{
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            Swal.fire({
                title: 'Success!!',
                text: 'Thêm thành côngg!!',
                icon: 'success',
                confirmButtonText: 'OK'
            });
        });
    </script>
}
@if (TempData["Error"] != null)
{
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            Swal.fire({
                title: 'Oops..',
                text: 'Lỗi quan hệ khóa...',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
    </script>
}

